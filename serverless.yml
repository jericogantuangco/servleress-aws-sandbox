org: jerico200
app: python-rest-api
service: python-rest-api
frameworkVersion: '3'

custom:
  bucket: csv-bucket-20230209

provider:
  name: aws
  runtime: python3.9
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: 
        - "arn:aws:s3:::${self:custom.bucket}"
        - "arn:aws:s3:::${self:custom.bucket}/*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt: [ receiverQueue, Arn ]
  environment:
    DYNAMODB_TABLE: ${self:service}-loyaltyCardTableV1-${sls:stage} 
    QUEUE_NAME: receiverQueue

functions:
  createLoyaltyCards:
    handler: controller.createLoyaltyCards
    events:
      - httpApi:
          path: /loyalty-cards
          method: post
  
  getLoyaltyCard:
    handler: controller.getLoyaltyCard
    events:
      - httpApi:
          path: /loyalty-cards/{id}
          method: get

  getLoyaltyCards:
    handler: controller.getLoyaltyCards
    events:
      - httpApi:
          path: /loyalty-cards
          method: get

  sendToSQS:
    handler: controller.sendToSQS
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv
  
  queueReceiver:
    handler: controller.queueReceiver
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ${self:provider.environment.QUEUE_NAME}
              - Arn
    
resources:
  Resources:
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema: 
          - AttributeName: id
            KeyType: HASH
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
  
    receiverQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.QUEUE_NAME}

plugins:
  - serverless-offline
